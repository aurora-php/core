<?php

class test implements \Iterator /*, \SeekableIterator, \Countable*/
/**/
{
    protected $position = 0;
    protected $data;
    protected $count = null;

    public function __construct($data)
    /**/
    {
        if (is_array($data)) {
            $this->data  = new ArrayObject($data);
            $this->count = count($data);
        } elseif (is_object($data) && $data instanceof Traversable) {
            $this->data = $data;
            
            if ($data instanceof Countable) {
                $this->count = count($data);
            }
        } else {
            die('specified parameter is not traversable');
        }
    }
    
    function rewind() {
        reset($this->data);
        $this->position = 0;
    }

    function current() {
        // return current($this->data);
        return $this->getItem();
    }

    function key() {
        return key($this->data);
    }

    function next() {
        next($this->data);
        ++$this->position;
    }

    function valid() {
        return (key($this->data) !== null);
    }
    
    function getItem() {
        return (object)array(
            'item'      => current($this->data),
            'key'       => key($this->data),
            'pos'       => $this->position,
            'count'     => $this->count,
            'is_first'  => ($this->position == 0),
            'is_last'   => (!is_null($this->count) && $this->position == $this->count - 1)
        );
    }
}

$cases = array(
    new test(array('a', 'b', 'c')),
    new test(new ArrayObject(array('a, b, c')))
);

foreach ($cases as $case) {
    foreach ($case as $k => $b) {
        printf("%s %s %s %s %s %s\n", $b->key, $b->item, $b->pos, $b->count, $b->is_first, $b->is_last);
    }
    
    print "\n";
}

