Parameter validation using schemas
==================================

How to implement rule chaining, to apply multiple rules on one
parameter?

*   type: chain?
    rules: validation rules chain
    
    validation chaining is achieved by the 'chain' validator, which accepts
    an array with multiple types/options to validate in chain. the chain validation
    stops, if any of the validators in the chain fails.
    
*   required / invalid

Field validation rules
~~~~~~~~~~~~~~~~~~~~~~

    *   type -- (required) type of field
        the type the field must have to be valid

_Example #1:_

Example shows required schema for validating login credentials:

..  source: php

    <?php
    
    $schema = array(
        'default' => array(                        // entry point, always required!
            'type'          => 'object',
            'properties'    => array(
                'username' => array(                // field: username
                    'type'  => 'print'
                ),
                'password' => array(                // field: password
                    'type'  => 'print'
                )
            )
        )
    );
    
    ?>

_Example: #2:_

Example shows required schema for user-registration data containing a list of up to 5 website URLs:

..  source: php

    <?php
    
    $schema = array(
        'default' => array(
            'type'       => 'object',
            'properties' => array(
                'username' => array(
                    'type'  => 'print'
                ),
                'password' => array(
                    'type'  => 'print',
                ),
                'password2' => array(           // a second password field to compare to
                    'type'      => 'callback',
                    'options'   => array(
                        'callback' => function($value) {
                            return ($value === $_POST->get('password')->value);
                        }
                    )
                ),
                'websites' => array(
                    'type'      => 'array',
                    'items'     => array('url'),
                    'min_items' => 0,
                    'max_items' => 5
                )
            )
        ),
        
        'url' => array(                         // name of schema: url
            'url' => array(
                'type' => 'url'
            )
        )
    )

_Example #3:_

Validation chaining in this example to demonstrate how to use it for example
to validate usernames in a registration form to contain only printable characters
and to exclude certain names:

..  source: php

    $schema = array(
        'default' => array(
            'type'       => 'object',
            'properties' => array(
                'username' => array(
                    'type'      => 'chain',
                    'options'   => array(
                        'chain' => array(
                            array(
                                'type'      => 'print'
                            ),
                            array(
                                'type'      => 'callback',
                                'options'   => array(
                                    'callback'  => function($value) {
                                        return !in_array($value, array('admin', 'chef'));
                                    }
                                )
                            )
                        )
                    )
                )
            )
        )
    )
    
