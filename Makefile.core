# vim:set noexpandtab:
#

#****h* Makefile
# NAME
#	Makefile.core
# FUNCTION
#	This is the makefile used to all administrative tasks regarding a project based on the OCTRiS framework
#	including the OCTRiS framework itself. This makefile is not intended to be called directly. Instead it's 
#	included in the project's own Makefiles. The following targets are available:
#
#	*	dev-install -- install project files in development environment
#	*	install -- install project files in production environment
#	*	dist -- create distribution package
#	*	deploy -- deploy project to production environment
#	*	rollback -- rollback production environment to last
#	*	reload -- reload configuration file
#	*	cleanup -- cleanup cache files
#	*	compile -- compile template files
#	*	gettext -- create gettext dictionaries
#	*	msgfmt -- generate localization files
#	*	cloc -- count lines of code in a project
# COPYRIGHT
#	copyright (c) 2006-2010 by Harald Lapp
# AUTHOR
#	Harald Lapp <harald@octris.org>
#****

SHELL:=$(shell which bash)
CURSYMDIR:=$(shell pwd)

#****t* Makefile/help
# SYNOPSIS
#	make help
# FUNCTION 
#	the target help displays general information and available makefile targets
#****
help::
	@echo ""
	@echo "OCTRiS Application Framework"
	@echo "copyright (c) 2006-2010 by Harald Lapp"
	@echo ""
	@echo "targets for project '$(project)'"
	@echo ""
	@echo "help             this help text"
	@echo ""
	@if [ "$(project)" = "org.octris.core" ]; then \
		echo "new              create new project"; \
		echo ""; \
	fi
	@echo "install          install project"
	@echo "clean            uninstall project"
	@echo "test             run all tests of a project"
	@echo ""
	@echo "dist             create distribution package"
	@echo "deploy           deploy project to production environment"
	@echo ""
	@echo "cleanup          cleanup cache files"
	@echo "compile          compile template files"
	@echo ""
	@echo "gettext          create gettext dictionaries"
	@echo "msgfmt           generate localization files"
	@echo ""
	@echo "cloc             count lines of code"

#****t* Makefile/install
# SYNOPSIS
#	make install
# FUNCTION
#	This target is used for installing an application. It's depends on the Target ~createdirs~ and creates symbolic links for
#	all required project files and directories to fit the directory structure required by the OCTRiS framework.
# SEE ALSO
#	createdirs
#****
install:: createdirs
	@ln -snf $(CURSYMDIR)/data				../../data/$(project)
	@ln -snf $(CURSYMDIR)/etc				../../etc/$(project)
	@ln -snf $(CURSYMDIR)/libs				../../libs/$(project)
	@ln -snf $(CURSYMDIR)/locale			../../locale/$(project)
	@ln -snf $(CURSYMDIR)/templates			../../templates/$(project)
	@ln -snf $(CURSYMDIR)/tools				../../tools/$(project)
	@if [ "$(project)" != "org.octris.core" ]; then \
		if [ -e $(CURSYMDIR)/host/index.php ]; then \
			ln -snf $(CURSYMDIR)/host/index.php					../../host/$(project)/index.php; \
		fi; \
		if [ -d $(CURSYMDIR)/host/robots.txt ]; then \
			ln -snf $(CURSYMDIR)/host/robots.txt				../../host/$(project)/robots.txt; \
		fi; \
		if [ -d $(CURSYMDIR)/host/error ]; then \
			ln -snf $(CURSYMDIR)/host/error						../../host/$(project)/error; \
		fi; \
		if [ -d $(CURSYMDIR)/resources ]; then \
			ln -snf $(CURSYMDIR)/resources						../../host/$(project)/resources; \
		fi; \
	fi; \

#****t* Makefile/clean
# SYNOPSIS
#	make clean
# FUNCTION
#	cleanup installation directories - remove symlinks 
#****
clean: onlyroot
	@rm -rf ../../cache/$(project)
	@rm -f 	../../data/$(project)
	@rm -rf ../../doc/$(project)
	@rm -f 	../../etc/$(project)
	@rm -f 	../../libs/$(project)
	@rm -f 	../../locale/$(project)
	@rm -rf ../../log/$(project)
	@rm -f 	../../templates/$(project)
	@rm -f 	../../tools/$(project)
	@if [ "$(project)" != "org.octris.core" ]; then \
		rm -f ../../host/$(project)/index.php; \
		rm -f ../../host/$(project)/robots.txt; \
		rm -f ../../host/$(project)/resources; \
		if [ -d ../../hots/$(project)/resources_ltk ]; then \
			rm -f ../../host/$(project)/resources_ltk; \
		fi; \
		rm -rf ../../host/$(project); \
	fi; \

#****t* Makefile/test
# SYNOPSIS
#	make test
# FUNCTION
# 	execute tests of a project
#****
test:
	@phpunit $(CURSYMDIR)/tests/

#****t* Makefile/msgfmt
# SYNOPSIS
#	make msgfmt
# FUNCTION
# 	create message objects from message files to use with gettext
#****
msgfmt:
	@$(CURSYMDIR)/../../tools/gettext/msgfmt.php --project=$(project)

#****t* Makefile/gettext
# SYNOPSIS
#	make gettext
# FUNCTION
# 	create gettext dictionaries
gettext:
	@$(CURSYMDIR)/../../tools/gettext/xgettext.php --project=$(project)

#****t* Makefile/cleanup
# SYNOPSIS
#	make cleanup
# FUNCTION
#	clear template and data caches
#****
cleanup:
	@rm -rf ../../cache/$(project)/data/*
	@rm -rf ../../cache/$(project)/templates_c/*

#****t* Makefile/compile
# SYNOPSIS
#	make compile
# FUNCTION
#	clear template cache and compile all template files
#****
compile:
	@rm -rf ../../cache/$(project)/templates_c/*
	@$(CURSYMDIR)/../../tools/misc/compile.php --project=$(project)

#****t* Makefile/createdirs
# SYNOPSIS
#	make createdirs
# FUNCTION
#	create directory structure
#****
createdirs:
	@if [ "$(project)" = "org.octris.core" ]; then \
		mkdir -p ../../cache; \
		mkdir -p ../../data; \
		mkdir -p ../../etc; \
		mkdir -p ../../host; \
		mkdir -p ../../libs; \
		mkdir -p ../../locale; \
		mkdir -p ../../log; \
		mkdir -p ../../templates; \
		mkdir -p ../../tools; \
	elif [ ! -d ../../host ]; then \
		echo ""; \
		echo "You have to install 'org.octris.core' first!"; \
		echo ""; \
		exit 1; \
	elif [ -d $(CURSYMDIR)/host ]; then \
		mkdir -p ../../host/$(project); \
		mkdir -p -m 0777 ../../host/$(project)/libsjs; \
		mkdir -p -m 0777 ../../host/$(project)/styles; \
		mkdir -p -m 0777 ../../log/$(project); \
	fi; \
	mkdir -p -m 0777 ../../cache/$(project)/data; \
	mkdir -p -m 0777 ../../cache/$(project)/templates_c; \

#****t* Makefile/deploy
# SYNOPSIS
#	make deploy
# FUNCTION
#	deploy project to production environment
#****
deploy: onlydevelopment
	@if [ "$(target)" = "" ]; then \
		echo ""; \
		echo "please specify a deploy target as commandline parameter"; \
		echo ""; \
		echo "eg.:"; \
		echo "       make deploy target=example"; \
		echo ""; \
		exit 1; \
	fi; \
	$(CURSYMDIR)/../../tools/deploy/deploy.sh -p $(project) -t $(target)

#****t* Makefile/dist
# SYNOPSIS
#	make dist
# FUNCTION
#	create distribution package of project for manual deployment
#****
dist: onlydevelopment
	@$(CURSYMDIR)/../../tools/deploy/deploy.sh -p $(project)

#****t* Makefile/cloc
# SYNOPSIS
#	make cloc
# FUNCTION
#	create statistics about lines of code used in a project
#****
cloc:
	@$(CURSYMDIR)/../../tools/project/cloc.pl $(CURSYMDIR)

#****t* Makefile/onlyroot
# SYNOPSIS
#	make onlyroot
# FUNCTION
#	check's, if user is root. exits makefile, if user is not root
#****
onlyroot:
	@if [ "`whoami`" != "root" ]; then \
		echo ""; \
		echo "This target can only be run by root user"; \
		echo ""; \
		exit 1; \
	fi

#****t* Makefile/onlyproduction
# SYNOPSIS
#	make onlyproduction
# FUNCTION
#	check's, if makefile is executed in production environment
#****
onlyproduction:
	@if [ "$(LIMA_DEVEL)" = "1" ]; then \
		echo ""; \
		echo "This target can only be run in production environment"; \
		echo ""; \
		exit 1; \
	fi

#****t* Makefile/onlydevelopment
# SYNOPSIS
#	make onlydevelopment
# FUNCTION
#	check's, if makefile is executed in development environment
#****
onlydevelopment:
	@if [ "$(LIMA_DEVEL)" != "1" ]; then \
		echo ""; \
		echo "This target can only be run in development environment"; \
		echo ""; \
		exit 1; \
	fi