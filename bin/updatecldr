#!/usr/bin/env php
<?php

/**
 * PHP Script to update CLDR data.
 *
 * @octdoc      h:bin/updatecldr
 * @copyright   copyright (c) 2014 by Harald Lapp
 * @author      Harald Lapp <harald@octris.org>
 */
/**/

set_error_handler(function ($no, $str, $file, $line) {
    throw new ErrorException($str, $no, 1, $file, $line);
});

if ($argc != 2) {
    die(sprintf("usage: %s path-to-cldr-data\n", $argv[0]));
}

$src = $argv[1];
$dst = realpath(__DIR__ . '/../data/cldr/');

if ($dst != '') {
    $tmp = scandir($dst);
}

if (!$dst) {
    die(sprintf("destination directory or directory not found:\n    %s\n", $dst));
} elseif (!$tmp || count($tmp) > 2) {
    die(sprintf("destination is no directory or directory is not empty:\n    %s\n", $dst));
}

`cp $src/unicode-license.txt $dst`;

`mkdir $dst/supplemental && mkdir $dst/main`;

// { territory containment
$data = array();
$tmp  = json_decode(
    file_get_contents($src . '/supplemental/territoryContainment.json'), true
)['supplemental']['territoryContainment'];

$flatten = function ($carry, $item) use ($tmp, &$flatten) {
    if (isset($tmp[$item])) {
        $carry = array_reduce($tmp[$item]['_contains'], $flatten, $carry);
    } else {
        $carry[] = $item;
    }

    return $carry;
};

foreach ($tmp as $code => $items) {
    if (strpos($code, '-') !== false) continue;

    $data[$code] = array_reduce($items['_contains'], $flatten, array());
    sort($data[$code]);
}

file_put_contents(
    $dst . '/supplemental/territoryContainment.json',
    json_encode($data, JSON_PRETTY_PRINT)
);
// }

// { main
$iterator = new \DirectoryIterator($src . '/main/');
$data     = null;
$filter   = array(
    'currencies.json', 'posix.json', 'territories.json'
);

$diff = function ($a1, $a2) use (&$diff) {
    $same = true;
    
    foreach ($a1 as $k => $v) {
        if (!($same = (isset($a2[$k]) && gettype($v) == gettype($a2[$k])))) {
            break;
        } elseif (is_array($v)) {
            if (!($same = $diff($v, $a2[$k]))) {
                break;
            }
        } elseif (!($same = ($v === $a2[$k]))) {
            break;
        }
    }
    
    return $same;
};
$create = function ($dir, array $cmp = null) use ($dst, $filter, $diff) {
    $code     = basename($dir);
    $data     = array();
    $iterator = new \DirectoryIterator($dir);
    
    foreach ($iterator as $item) {
        if (!$item->getExtension() == 'json') continue;

        $filename = $item->getFilename();
        
        if (!in_array($filename, $filter)) continue;
        
        $tmp = json_decode(file_get_contents($item->getPathname()), true)['main'][$code];
        unset($tmp['identity']);

        if (is_null($cmp) || !isset($cmp[$filename])) {
            $data[$filename] = $tmp;
        } elseif ($diff($tmp, $cmp[$filename])) {
            continue;
        } else {
            // if (json_encode($tmp) == json_encode($cmp[$filename])) {
            //     continue;
            // }

            $data[$filename] = $tmp;
        }
    }

    if (count($data) > 0) {
        $path = $dst . '/main/' . $code;

        if (!is_dir($path)) {
            mkdir($path);
        }
        
        foreach ($data as $filename => $tmp) {
            file_put_contents($path . '/' . $filename, json_encode($tmp, JSON_PRETTY_PRINT));
        }
    }
    
    return $data;
};

foreach ($iterator as $item) {
    if (!$item->isDir()) continue;

    $filename = $item->getFilename();

    if (preg_match('/^[a-z]+$/', $filename, $match)) {
        $data = $create($item->getPathname());
    } elseif (is_null($data)) {
        continue;
    } else {
        $create($item->getPathname(), $data);
    }
}
// }